[
  {
    "type_of": "article",
    "id": 466723,
    "title": "Submit Your Hacktoberfest Repos to up-for-grabs!",
    "description": "See something wrong? Edit this post on GitHub!  As Hacktoberfest 2020 descends in less than a week (!...",
    "published": true,
    "published_at": "2020-09-27T00:25:39.686Z",
    "slug": "submit-your-hacktoberfest-repos-to-up-for-grabs-1a3",
    "path": "/pepperwood/submit-your-hacktoberfest-repos-to-up-for-grabs-1a3",
    "url": "https://dev.to/pepperwood/submit-your-hacktoberfest-repos-to-up-for-grabs-1a3",
    "comments_count": 0,
    "public_reactions_count": 6,
    "page_views_count": 113,
    "published_timestamp": "2020-09-27T00:25:39Z",
    "body_markdown": "See something wrong? [Edit this post on GitHub!](https://github.com/Pepper-Wood/DevLog/blob/master/up-for-grabs.md)\n\nAs [Hacktoberfest 2020](https://hacktoberfest.digitalocean.com/) descends in less than a week (!!!), I wanted to give a shoutout to [up-for-grabs.net](https://up-for-grabs.net/).\n\n{% github up-for-grabs/up-for-grabs.net %}\n\nI find it a super useful resource when looking for OSS to contribute to with my current skillset. I'd love for others who are prepping their projects for Hacktoberfest to make use of it - or those who are also exploring what's out there.\n\nIf you are prepping your repos for Hacktoberfest, you can use the Hacktoberfest label as the \"beginner-friendly\" tag when submitting. [OpenFaaS](https://www.openfaas.com/), an open source implementation of Function as a Service, and [Matomo](https://matomo.org/), \"the leading open alternative to Google Analytic\", both use their \"Hacktoberfest\" issue labels in this manner, for example.\n\nHope you find this resource as helpful as I do. I'm more than happy to assist with any PRs if you want your repo added to the listing. Good luck during Hacktoberfest!\n",
    "positive_reactions_count": 6,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--l8g8ZOlm--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/69bghop6i4rd594780mc.png",
    "tag_list": [
      "hacktoberfest",
      "github",
      "opensource"
    ],
    "canonical_url": "https://dev.to/pepperwood/submit-your-hacktoberfest-repos-to-up-for-grabs-1a3",
    "user": {
      "name": "Kathryn DiPippo",
      "username": "pepperwood",
      "twitter_username": null,
      "github_username": "Pepper-Wood",
      "website_url": "https://kathryndipippo.com",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--tdiiaEcU--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/346572/e2316eb9-3994-4858-9991-15409a47b43c.png",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--rB77cnpX--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/346572/e2316eb9-3994-4858-9991-15409a47b43c.png"
    }
  },
  {
    "type_of": "article",
    "id": 460197,
    "title": "Rendering OpenAPI specs in Angular",
    "description": "See something wrong? Edit this post on GitHub!  APIs and API documentation go hand-in-hand. With the...",
    "published": true,
    "published_at": "2020-09-19T04:17:33.424Z",
    "slug": "rendering-openapi-specs-in-angular-582f",
    "path": "/pepperwood/rendering-openapi-specs-in-angular-582f",
    "url": "https://dev.to/pepperwood/rendering-openapi-specs-in-angular-582f",
    "comments_count": 0,
    "public_reactions_count": 8,
    "page_views_count": 237,
    "published_timestamp": "2020-09-19T04:17:33Z",
    "body_markdown": "_See something wrong? [Edit this post on GitHub!](https://github.com/Pepper-Wood/DevLog/blob/master/rendering-openapi-specs-in-angular.md)_\n\nAPIs and API documentation go hand-in-hand. With the help of of the `swagger-ui-dist` npm package, it's super easy to take an OAS YAML or JSON file and display it as a separate page for others to browse. This walkthrough will create an Angular component dedicated to showing the API documentation.\n\n## Assemble your OAS spec\n\nBoth JSON and YAML can be used for this process. The main key is that the file needs to be accessible via a live URL. You can do this by taking your spec and pushing it to a public repo and utlilizing GitHub's \"Raw\" file feature.\n\nI will be using the files https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v3.0/petstore.yaml found in the `examples/` folder for OAS v3.\n\n{% github OAI/OpenAPI-Specification no-readme %}\n\n## Add swagger-ui-dist to package.json and angular.json files\n\nIn the root of your project, run:\n```\n$ npm install swagger-ui-dist\n```\n\nThis will add the `swagger-ui-dist` CSS and JS files needed to render the API documentation layout.\n\nYou'll next need to include said files into the \"styles\" and \"scripts\" section of your Angular project for them to be pulled in. See the lines below marked with +s for what to add to the project build:\n\n```json\n\"architect\": {\n  \"build\": {\n    \"builder\": \"@angular-devkit/build-angular:browser\",\n    \"options\": {\n      \"outputPath\": \"dist/example-angular-project\",\n      \"index\": \"src/index.html\",\n      \"main\": \"src/main.ts\",\n      \"polyfills\": \"src/polyfills.ts\",\n      \"tsConfig\": \"tsconfig.app.json\",\n      \"aot\": true,\n      \"assets\": [\n        \"src/favicon.ico\",\n        \"src/assets\"\n      ],\n      \"styles\": [\n+       \"node_modules/swagger-ui-dist/swagger-ui.css\",\n        \"src/styles.css\"\n      ],\n      \"scripts\": [\n+       \"node_modules/swagger-ui-dist/swagger-ui-bundle.js\",\n+       \"node_modules/swagger-ui-dist/swagger-ui-standalone-preset.js\"\n      ]\n    },\n```\n\n## Create a new Angular component\n\nContinue as you would with adding an Angular component.\n\n```\n$ ng g c api\n```\n\nUpdate `app-routing.module.ts` to route `https://localhost:4200/api` to this component.\n\n```js\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { ApiComponent } from './api/api.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'api', component: ApiComponent },\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n```\n\nSpin up the project using `ng serve` to confirm that `https://localhost:4200/api` shows you the generated `<p>api works!</p>` message.\n\n![Expected successful Angular component integration](https://dev-to-uploads.s3.amazonaws.com/i/ef0cochro1q5anz045cu.png)\n\n## Updating ApiComponent to utilize swagger-ui-dist\n\nChange the `api.component.html` file to include the below div. The `swagger-ui` ID will be what the OpenAPI spec display gets rendered inside.\n\n```html\n<div id=\"swagger-ui\"></div>\n```\n\nMeanwhile, `api.component.ts` should be updated with the following:\n\n```js\nimport { Component, OnInit } from '@angular/core';\nimport { SwaggerUIBundle, SwaggerUIStandalonePreset } from 'swagger-ui-dist';\n\n@Component({\n  selector: 'app-api',\n  templateUrl: './api.component.html',\n  styleUrls: ['./api.component.css']\n})\nexport class ApiComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n    const ui = SwaggerUIBundle({\n      dom_id: '#swagger-ui',\n      layout: 'BaseLayout',\n      presets: [\n        SwaggerUIBundle.presets.apis,\n        SwaggerUIBundle.SwaggerUIStandalonePreset\n      ],\n      url: 'https://raw.githubusercontent.com/OAI/OpenAPI-Specification/master/examples/v2.0/yaml/petstore.yaml',\n      operationsSorter: 'alpha'\n    });\n  }\n\n}\n```\n\nGoing through the notable changes, we first import SwaggerUIBundle and SwaggerUIStandalonePreset from the `swagger-ui-dist` node package added earlier. This will allow us to initial the SwaggerUIBundle() call that gets made when the component initializes.\n\nWe can see that `swagger-ui` ID mentioned prior. This can be changed if needed (i.e. if you want multiple specs to show on the same page and need to distinguish between the two). For more information about these settings and ways to customize them, the SwaggerUI documentation can be found at https://swagger.io/docs/open-source-tools/swagger-ui/usage/configuration/.\n\nMost notably, the `url` is just set to the `raw.githubusercontent.com` URL for the OpenAPI spec's YAML file.\n\nRunning `ng serve` on the same page, and you should now see your API documentation nicely rendered!\n\n![Expected successful OpenAPI spec in Angular](https://dev-to-uploads.s3.amazonaws.com/i/m3bhwq4276t9mwbrv4ge.png)\n\n## Conclusion\n\nWith just a few steps, we are now able to house a dynamic view of the API documentation in our Angular project. I recommend using this method to host your documentation with GitHub pages while also providing users to download the spec raw.\n",
    "positive_reactions_count": 8,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--lealIgoj--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/fl1o9arqf2llz3hqvjvt.png",
    "tag_list": [
      "angular",
      "openapi",
      "documentation",
      "javascript"
    ],
    "canonical_url": "https://dev.to/pepperwood/rendering-openapi-specs-in-angular-582f",
    "user": {
      "name": "Kathryn DiPippo",
      "username": "pepperwood",
      "twitter_username": null,
      "github_username": "Pepper-Wood",
      "website_url": "https://kathryndipippo.com",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--tdiiaEcU--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/346572/e2316eb9-3994-4858-9991-15409a47b43c.png",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--rB77cnpX--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/346572/e2316eb9-3994-4858-9991-15409a47b43c.png"
    }
  },
  {
    "type_of": "article",
    "id": 399055,
    "title": "30 Days into #100DaysOfCode Retrospective",
    "description": "Need clarification or see a typo? Edit this post on Github!  A few months ago, thanks to current time...",
    "published": true,
    "published_at": "2020-07-15T16:46:26.220Z",
    "slug": "30-days-into-100daysofcode-retrospective-1fo7",
    "path": "/pepperwood/30-days-into-100daysofcode-retrospective-1fo7",
    "url": "https://dev.to/pepperwood/30-days-into-100daysofcode-retrospective-1fo7",
    "comments_count": 0,
    "public_reactions_count": 3,
    "page_views_count": 0,
    "published_timestamp": "2020-07-15T16:46:26Z",
    "body_markdown": "_Need clarification or see a typo? [Edit this post on Github!](https://github.com/Pepper-Wood/DevLog/blob/master/30-days-into-100-days-of-code.md)_\n\nA few months ago, thanks to _current times_, I found myself with a newfound motivation to continue working on my side projects. However, I was running into a cycle of picking up a project and them putting it down after 2 days to chase another shiny new project. The whiplash was too much.\n\nI took some time off to regroup. I struggled with balancing a full-time workday with recreational coding in the evenings. Eventually, I felt rested and ready to start back up. I read dev.to articles to get back into the swing of things, where I learned of #100DaysOfCode.\n\nMy goal with this article is to detail what worked, what didn't, and what to improve for the next 70 days. Let me know in the comments if you relate to any of these experiences and ways you overcame them.\n\n## My #100DaysOfCode Goals\n\nThe official #100DaysOfCode rules are found at https://www.100daysofcode.com/. I also recommend checking out softwaredotcom's article for more insight:\n\n{% link softwaredotcom/essential-guide-to-the-100-days-of-code-challenge-3b5g %}\n\nMost participants of this challenge steer toward learning a new skill, learning a new framework, or starting to code. My challenge differed slightly. I needed to commit to finishing one idea while finding a sustainable work/life balance.\n\n### My Rules:\n\n1. Code an hour every day for the next 100 days on one project.\n2. Maintain a daily DEVLOG with time spent and tasks accomplished each day.\n\nThese rules deviate from the official rules: the one hour deadline became a time limit (instead of a minimum), and my DEVLOG resided away from social media like Twitter or dev.to.\n\nFrom a high level, the project consists of:\n- An Angular static website\n- An API made with PHP\n- A Chrome/Firefox extension\n- A human-readable, version-controllable database\n\nI had little experience with all 4 components starting out. I knew there would be enough new concepts to learn.\n\n## My Past \"Attempts\"\n\nWriting this post, I realized that what has worked during my #100DaysOfCode challenge contrasted with what _hadn't_ worked in other trend challenges I participated in. In 2016 for #Inktober, an art challenge to create an inked picture every day of October, I lasted 13 days. The art I completed is viewable at https://www.deviantart.com/pepper-wood/gallery/60508827/inktober.\n\nWith #Inktober and other similar challenges, a trend of behaviors appears:\n- **I feel pressured to one-up myself each day.** This is apparent with my Inktober 2016 artwork. I start relatively simple and gradually build to more involved works.\n- **The escalated workload becomes unsustainable.** Keeping up with the challenge means losing sleep and focus during the day.\n- **The load overwhelms me.** I take a day off to recuperate from the prior day's long hours.\n- **The double workload the next day breaks the momentum.** My involvement with the challenge ends.\n\n## My Takeaways after 30 Days\n\nThe #100DaysOfCode rules unknowlingly aided with mitigating my prior struggles. By not limiting the challenge to a calendar month, I was able to take time off and regroup when my tasks got out of hand.\n\n### 1) \"One Hour a Day\" is better as a time limit, not a minimum requirement\n\nKnowing I was still recovering from my initial burnout, I established the one hour rule as a timebox. Once the time limit was hit, my work stopped for the day. This helped maintain a routine without pushing too fast at the start. I wasn't consumed by coding for the full day. However, the time limit enforcement eased over time due to increasing familiarity with the outstanding tasks. Maybe I should reintroduce the timebox, taking into account the side effects of its relaxation.\n\n### 2) I burned out but kept going\n\nTwice, I needed to take a day off between my coding days. In both cases, I made sure to resume my progress the next day to avoid derailment.\n\nI took a day off after **Day 9**. I was hesitant to start on the browser extension component after prior attempts to build browser extensions failed. I was apprehensive about whether I would be able to keep up the pace while out of my element.\n\nI took another day off after **Day 17**. The reasoning is way more obvious:\n- Day 15: 1.5 hours spent working, on a Friday\n- Day 16: 6.5 hours spent working, on a Saturday\n- Day 17: 6.5 hours spent working, on a Sunday\n- Day off, on a Monday\n- Day 18: 8 hours spent working, on a Tuesday\n- Day 19: 30 minutes spent working, on a Wednesday\n- Day 20: 6 hours spent working, on a Thursday\n\nMy hours oscillated wildly and fried my brain in the process. After Day 20, I noticed my shaky work times and recalibrated back to spending 2-3 hours per day.\n\nI'm thankful that the format of #100DaysOfCode meant I could take those 2 days off and reset. In other challenges, the days off hailed the end of my participation.\n\nI unknowingly assumed that the end of the 100 days meant the completion of this project without properly laying out what tasks needed to be accomplished, what a final product would resemble, or whether the timeline fairly aligned with the steps needed. This assumption fueled a worry to constantly move and progress, while the initial timeboxed pace may have been the right speed. Moving forward, I want to continue recognizing when I'm being unfairly hard on myself. This change should result in fewer burnouts in the future.\n\n### 3) I needed the DEVLOG to be kept away from social media\n\nIn the original rules for #100DaysOfCode, the daily developer updates are encouraged to be posted as tweets with the hashtag. I've also seen others post their updates as articles here on dev.to.\n\nI had the foresight to know that a pressure to post on social media would hinder my progress more than help. My logging expectations in the past have trended similarly with escalating code expectations. I get caught up in the finesse and length of written updates. A lack of a rigid logging structure meant a lack of pressure and energy to keep my notes perfect.\n\n### 4) The DEVLOG was unexpectedly useful for logging my hours and reviewing past attempts\n\nI can't count the number of times where I needed to recall a link or an earlier attempt, only to check the DEVLOG and find exactly what I needed. Looking back, I wish I did the same for my other challenges to better understand my derailments. I recommend using the DEVLOG to log both successful and unsuccessful implementation strategies along with any informative links encountered.\n\n### 5) Lack of a Project Management framework in the beginning was a good thing\n\nI also had the foresight to know that setting up a project management tool in the beginning would stunt my initial momentum. Frequently in past projects, my good intentions to compile and organize all the required tasks leave me face-to-face with a mountain of tickets. Accomplishing tasks barely makes a dent, discouraging me from continuing.\n\nInstead, I started a broad, bulleted TODO at the end of my DEVLOG as tasks came to me. It wasn't until Day 25, after typing a rough draft of this article, when I formalized a Trello board for task management. I realized I placed an unspoken, unjustified expectation that the end of the 100 days meant the completion of this project. This assumption may have been fueled by not establishing endgoals on Day 1. However, I now had a greater understanding of how to build the necessary components and a better expectation for what a \"Phase 1\" resulting product would contain.\n\n## Conclusion\n\nThere you have it. My 5 main takeaways from my #100DaysOfCode challenge so far. I'm proud of the work I've accomplished to this point, and I'm passionate about what the end result will entail. I can't wait to share more about it once the implementation is more concrete.",
    "positive_reactions_count": 3,
    "cover_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--g8Wz2gFj--/c_imagga_scale,f_auto,fl_progressive,h_420,q_auto,w_1000/https://dev-to-uploads.s3.amazonaws.com/i/w4uoaqqerr2c08mr5m96.png",
    "tag_list": [
      "100daysofcode",
      "productivity"
    ],
    "canonical_url": "https://dev.to/pepperwood/30-days-into-100daysofcode-retrospective-1fo7",
    "user": {
      "name": "Kathryn DiPippo",
      "username": "pepperwood",
      "twitter_username": null,
      "github_username": "Pepper-Wood",
      "website_url": "https://kathryndipippo.com",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--tdiiaEcU--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/346572/e2316eb9-3994-4858-9991-15409a47b43c.png",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--rB77cnpX--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/346572/e2316eb9-3994-4858-9991-15409a47b43c.png"
    }
  },
  {
    "type_of": "article",
    "id": 330013,
    "title": "Automating RPG Maker MV HTML builds to Itch.io using Github Actions",
    "description": "Need clarification or see a typo? Edit this post on Github!  Disclaimer: This is a living document, a...",
    "published": true,
    "published_at": "2020-05-08T02:40:31.827Z",
    "slug": "automating-rpg-maker-mv-html-builds-to-itch-io-using-github-actions-3n02",
    "path": "/pepperwood/automating-rpg-maker-mv-html-builds-to-itch-io-using-github-actions-3n02",
    "url": "https://dev.to/pepperwood/automating-rpg-maker-mv-html-builds-to-itch-io-using-github-actions-3n02",
    "comments_count": 0,
    "public_reactions_count": 6,
    "page_views_count": 224,
    "published_timestamp": "2020-05-08T02:40:31Z",
    "body_markdown": "_Need clarification or see a typo? [Edit this post on Github](https://github.com/Pepper-Wood/DevLog/blob/master/automating-rpg-maker-mv-html-builds-to-itch.io-with-github-actions.md)!_\n\n_Disclaimer: This is a living document, as I'm continuing to understand how to better these development processes._\n\nI'm new to the game development scene. Even though a good handful of my friends in college were Game Dev majors, I had not tried my hand at them myself. But nonetheless, a recent hobby of mine has been browsing the [Game Jams](https://itch.io/jams) page on itch.io.\n\nIt wasn't until the [Magical Girl Game Jam](https://itch.io/jam/magical-girl-game-jam) where I saw a community post recruiting others for a team that I finally took the leap. I appreciated the guidance the others on that team provided me to both push myself to try implementing features and give assistance when I faced a blocker.\n\nThe game engine the lead programmer decided was RPG Maker MV (RMMV for short). Working with RMMV presents some interesting capabilities:\n- The RMMV engine framework/engine is written in JavaScript, and the data for the game is stored in large JSON files.\n- Extending game functionality usually means adding singular JavaScript files (referred to as Plugins) to override default behaviors.\n- RMMV games can be exported to Windows, Mac, Linux, or Web Browser builds. But! the files in the project are already structured for Web Builds and are reconfigured for other export types.\n\nIt's easy to version control RMMV builds, although I recommend expanding the JSON files when committing (they're saved to be 1 line long, but diffs then show entire lines being changed rather than one or two entries) and compressing them back for builds.\n\nIn this walkthrough, I'll show how I've set up Github Actions + Python scripts to streamline the RMMV development process \n\n## Organizing the Repo\n\nBefore explaining what each file in the first two folders is doing, here is the current structure for my RPG Maker MV project repo.\n\n```\n\u251c\u2500\u2500 .github/\n\u2502   \u251c\u2500\u2500 workflows/\n\u2502   \u2502   \u2514\u2500\u2500 itch_build.yml\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 format_json.py\n\u2502   \u2514\u2500\u2500 zip_restrictions.py\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 audio/*\n\u2502   \u251c\u2500\u2500 data/*\n\u2502   \u251c\u2500\u2500 fonts/*\n\u2502   \u251c\u2500\u2500 icon/*\n\u2502   \u251c\u2500\u2500 img/*\n\u2502   \u251c\u2500\u2500 js/*\n\u2502   \u251c\u2500\u2500 movies/*\n\u2502   \u251c\u2500\u2500 save/*\n\u2502   \u251c\u2500\u2500 Game.rpgproject\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 .gitignore\n```\n\n## Setting up Prettifying and Minifying JSON files\n\nThis step is not necessary for the automation process, but I find it useful when figuring out what changes were made to commits. From a high level:\n- JSON files should be prettified after each commit automatically\n- JSON files should be minified right before the game build is generated.\n\nThis file is written in Python 3 just due to personal preference.\n\n### format_json.py\n\n```py\nimport json\nimport os\nimport sys\n\nrootdir = 'src'\n\nformat_type = sys.argv[1]\n\nfor subdir, dirs, files in os.walk(rootdir):\n    for file in files:\n        ext = os.path.splitext(file)[-1].lower()\n        if ext == '.json':\n            filename = os.path.join(subdir, file)\n            print(filename)\n            with open(filename, 'r') as json_file:\n                json_object = json.load(json_file)\n            f = open(filename, 'w')\n            if format_type == 'prettify':\n                f.write(json.dumps(json_object, indent=2))\n            elif format_type == 'minify':\n                f.write(json.dumps(json_object, separators=(',', ':')))\n            f.close()\n```\n\nThis one file handles both of these actions, due to the closeness of their implementation. The script is run as either `python3 scripts/format_json.py prettify` or `python3 scripts/format_json.py minify`. It checks all files in the specified root directory (hard-coded to 'src/') and applise the json.dumps() prettifying or minifying before resaving the files.\n\n## zip_restrictions.py\n\n```py\nimport os\n\nrootdir = 'src'\n\nchecks_text = [\n    \"The ZIP file should not contain more than 500 individual files after extraction.\",\n    \"The maximum length of a file name including path should not be greater than 240 characters long.\",\n    \"The size of all the extracted content should not be greater than 1GB.\",\n    \"The size any single extracted file should not be greater than 100MB.\"\n]\nchecks = [True, True, True, True]\n\ntotal_file_size = 0\ntotal_count = 0\nONE_HUNDRED_MEGABYTES = 104857600\nONE_GIGABYTE = 1073741824\n\nfor subdir, dirs, files in os.walk(rootdir):\n    if subdir == 'src/save':\n        continue\n    for file in files:\n        if file == 'Game.rpgproject':\n            continue\n        if len(file) > 240:\n            print(f\"[!] Filename for {file} is {len(file-240)} characters too long!\")\n            checks[1] = False\n        total_count = total_count + 1\n        file_size = os.path.getsize(os.path.join(subdir, file))\n        total_file_size += file_size\n        if file_size >= ONE_HUNDRED_MEGABYTES:\n            print(f\"[!] {file} is {file_size} bytes!\")\n            checks[3] = False\n\nif total_count > 500:\n    checks[0] = False\n    print(f\"[!] {total_count} files total!\")\nif total_file_size > ONE_GIGABYTE:\n    checks[2] = False\n    print(f\"[!] Total file size is {total_file_size} bytes!\")\n\nprint(\"-\"*20)\nfor i in range(len(checks)):\n    if checks[i]:\n        print(f\"\u2705 {checks_text[i]}\")\n    else:\n        print(f\"\u274c {checks_text[i]}\")\n\n```\n\nBased on the HTML build restrictions documented by itch.io, this helper code will detect whether the resulting files will successfully create a build early (vs. having to see the error on your test page). The script is run as `python3 scripts/zip_restrictions.py`.\n\n## Pre-Commit Git Hooks\n\n// TODO \n\n**Update:** This section is still a work-in-progress as I figure out how to incorporate these changes into the repo. `python3 scripts/format_json.py prettify` was initially run as a separate Github Actions workflow, but that required pushing and immediately pulling changes on the branch.\n\nInstead, `format_json.py prettify` and `zip_restrictions.py` should both be run as steps in the pre-commit git hook.\n\n## itch_build.yml Github Action workflow\n\nNow with the steps to make the developer experience with these data structures better, onto the actual build automation file.\n\n```yml\nname: itch.io HTML Build\n\non:\n  push:\n    branches:\n      - master\n\njobs:\n  itch_build:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Python\n      uses: actions/setup-python@v1\n      with:\n        python-version: '3.x'\n    - name: format-json.py\n      run: python3 scripts/format_json.py minify\n    - name: Zip Folder\n      run: zip -r build.zip src/ -x \"Game.rpgproject\" \"save/*\"\n    - uses: josephbmanley/butler-publish-itchio-action@master\n      env:\n        BUTLER_CREDENTIALS: ${{ secrets.BUTLER_CREDENTIALS }}\n        CHANNEL: HTML\n        ITCH_GAME: itch-game\n        ITCH_USER: itch-user\n        PACKAGE: build.zip\n```\n\nThis Github Action is set to run on every push to the master branch of the repo. To reiterate what the first three steps are doing:\n1. Opens the repos files to read the python scripts\n2. Downloads the latest stable version of Python 3\n3. Runs the prior format_json.py file set to minify the json files\n\nNow it gets interesting. The workflow zips all the files in src/ except for Game.rpgproject and the save/ directory. As mentioned earlier, the RMMV project files are stored nearly identically to what the resulting HTML build file will be. The only difference is the HTML build will exclude the save/ folder and the Game.rpgproject file. \"Deploying\" a project in RPG Maker MV will just generate this file, and we would need to zip it to ship it to Itch.io. Hence, this takes care of two birds with one stone.\n\nThe fifth and final step is to use the available [butler-publish-itchio Github Action](https://github.com/josephbmanley/butler-publish-itchio-action). [Butler](https://itch.io/docs/butler/) is the commandline tool to interface with itch.io and requires a bit of extra set up in order to use with your project. You'll need to replace ITCH_GAME and ITCH_USER with the strings that apply to your projects, with the next step to get your Butler credentials.\n\n## Setting Up Butler\n\nYou will need to follow the tutorial provided at itch.io for getting the correct Butler credentials following the \"The automation-friendly way\" process: https://itch.io/docs/butler/installing.html\n\nYou'll know if you have the correct credentials when the API key you generated has its source listed as `wharf`: https://itch.io/user/settings/api-keys\n\nThe [butler-publish-itchio Github Action](https://github.com/josephbmanley/butler-publish-itchio-action) page also details how to generate the proper API key and store it in your Github Secrets.\n\n## Your First Build\n\nBy now, you have both `butler` available as a command on your computer and the credentials stored in your repo's Github Secrets. But you can't use the workflow to fire off a build just yet, if you're starting a new project from scratch. You'll need to create a blank game project in the itch.io and then use that project name to manually fire off the first build. Set the viewing status to something besides public, depending on the situation.\n\nYou can use the commands from the itch_build.yml file to do the manual deploy:\n```\nzip -r build.zip src/ -x \"Game.rpgproject\" \"save/*\"\nbutler push build.zip itch-name/itch-game:HTML\n```\n\nYou should see your build appear on itch in a few moments. If you want to check the status of the deployment:\n```\nbutler status itch-name/itch-game:HTML\n```\n\nNow that the first and only manual deployment is complete, you can commit the github workflow ymls. Anytime you push to master, a new HTML build will be fired off to replace the game the workflow is pointing to. \ud83c\udf89\n\n## Template Repository\n\nI've started work on creating a template RPG Maker MV project both for myself and for others to use: https://github.com/Pepper-Wood/RPG-Maker-MV-Starter-Template\n\n## In Conclusion\n\nThere's still a number of quality-of-life / developer experience improvements I have in mind for my RPG Maker MV projects. I can imagine a next step of improvement for this tutorial would be to configure this with 2 different itch.io push workflows:\n\n- On pushes to master: Deploy a build to a restricted itch.io project to act as a \"development\" build for others on the team to troubleshoot. A password can be generated to distribute to beta testers as well.\n- On new repo tag creation: Deploy a versioned build to a public itch.io project for the general public.\n\nAdditionally, itch.io has restrictions on the number of files an HTML build can be in order for it to run properly. RPG Maker MV does not offer different template options when starting projects. A new game project will contain hundreds of placeholder and default assets that need to be manually deleted. An extra validation step on the itch_build.yml process to count the total number of files would catch these issues earlier vs. seeing the message on the restricted project page.\n\nAll in all, I hope this guide was helpful. I'm looking forward to getting better with RMMV and publishing these processes.",
    "positive_reactions_count": 6,
    "cover_image": null,
    "tag_list": [
      "rpgmakermv"
    ],
    "canonical_url": "https://dev.to/pepperwood/automating-rpg-maker-mv-html-builds-to-itch-io-using-github-actions-3n02",
    "user": {
      "name": "Kathryn DiPippo",
      "username": "pepperwood",
      "twitter_username": null,
      "github_username": "Pepper-Wood",
      "website_url": "https://kathryndipippo.com",
      "profile_image": "https://res.cloudinary.com/practicaldev/image/fetch/s--tdiiaEcU--/c_fill,f_auto,fl_progressive,h_640,q_auto,w_640/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/346572/e2316eb9-3994-4858-9991-15409a47b43c.png",
      "profile_image_90": "https://res.cloudinary.com/practicaldev/image/fetch/s--rB77cnpX--/c_fill,f_auto,fl_progressive,h_90,q_auto,w_90/https://dev-to-uploads.s3.amazonaws.com/uploads/user/profile_image/346572/e2316eb9-3994-4858-9991-15409a47b43c.png"
    }
  }
]